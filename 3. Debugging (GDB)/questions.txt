

Experiment 1
------------

> GUESS: how many bytes were added to the stack, 
Each push instruction adds 8 bits or 1 byte. 
Since there are 3 push instructions, 
total bytes added to stack = 3 bytes.
My approach: Looked at the bits added by each 'push' instruction * 3.

> GUESS: What is in %rax? [print $rax]
4195565 (0x3)

> GUESS: What is on the top of the stack now, i.e., (%rsp)? [x $rsp]
0x00000003 (which is the last push to stack)

> GUESS: What is the item right below the top of the stack, i.e., 8(%rsp) [x $rsp+8]
0x00000002

> GUESS: What is in %rbx? [print $rbx]
1 (0x1)



Experiment 2
------------

> OBSERVE: where does .text start? [p start_of_text]
0x4004ed

> OBSERVE: where does .data start? [info var start_of_data]
0x000000000060102c

> OBSERVE: addresses of the label in the .text section [p main]
0x4004ed (same as .text)

> GUESS: What are the addresses of label in the .data section? [i var stuff]
0x000000000060102c (same as 

> GUESS: Contents of address pointed to by `stuff` [x (long) stuff]
1 (adding +1 offset,we get 2, adding +2 offset, we get 3.....)

> GUESS: What's the 5th element of `stuff`? [x $rax + (4*8)]
0x5441d589

> GUESS: How big is stuff? [p (long[8]) stuff]
{1, 2, 3, 4, 5, 6, 7, 8}  (8 byte)


Experiment 3
------------

> GUESS: What is on top of the stack? Here, compare with the value printed by `p $after_dummy` [x $rsp]
0x004004f8

> GUESS: What is the address of the top of the stack, relaive to the first showq in `main`? [p $rsp]
(some bits pushed over the previous top of stack)

> OBSERVE: Print the current stack pointer before calling `dummy1` [p $rsp]
0x7fffffffe1c8

> GUESS: What is the current stack pointer? [p $rsp]
0x7fffffffe1c0

> OBSERVE: the address of the first instruction after returning from `dummy1` [p $after_dummy1 or x $rip]
0x4004f8: 0x0fc3c990

Experiment 4
------------

> GUESS: What is the state of rbp/rsp after stack frame is set up?
rsp -> 0x7fffffffe1b0
rbp -> 0x7fffffffe1b0

> GUESS: What is the state of rbp/rsp after the stack frame is destroyed?
rsp -> 0x7fffffffe1b8
rbp -> 0x7fffffffe1c0